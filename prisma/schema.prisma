// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(cuid())
  email       String   @unique
  password    String
  firstName   String
  lastName    String
  phone       String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  addresses   Address[]
  orders      Order[]
  reviews     Review[]
  cart        Cart?
  wishlist    Wishlist?
  preferences UserPreferences?

  @@map("users")
}

model UserPreferences {
  id          String  @id @default(cuid())
  userId      String  @unique
  newsletter  Boolean @default(false)
  notifications Boolean @default(true)
  language    String  @default("en")
  currency    String  @default("NGN")
  
  user        User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_preferences")
}

model Address {
  id            String  @id @default(cuid())
  userId        String
  type          String  // 'home', 'work', 'other'
  firstName     String
  lastName      String
  phone         String
  street        String
  city          String
  state         String
  country       String  @default("Nigeria")
  postalCode    String?
  additionalInfo String?
  isDefault     Boolean @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  user          User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  orders        Order[] @relation("ShippingAddress")
  billingOrders Order[] @relation("BillingAddress")

  @@map("addresses")
}

model Product {
  id                String   @id @default(cuid())
  name              String
  description       String
  longDescription   String?
  price             Decimal  @db.Decimal(10, 2)
  originalPrice     Decimal? @db.Decimal(10, 2)
  category          String
  subcategory       String?
  image             String
  images            String[]
  stock             Int      @default(0)
  sku               String   @unique
  weight            Decimal? @db.Decimal(8, 2)
  dimensions        Json?    // {length, width, height}
  materials         String[]
  specifications    Json?    // key-value pairs
  careInstructions  String[]
  tags              String[]
  rating            Decimal? @db.Decimal(3, 2)
  reviewCount       Int      @default(0)
  isActive          Boolean  @default(true)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  variants          ProductVariant[]
  reviews           Review[]
  orderItems        OrderItem[]
  cartItems         CartItem[]
  wishlistItems     WishlistItem[]
  relatedProducts   ProductRelation[] @relation("ProductRelations")
  relatedToProducts ProductRelation[] @relation("RelatedProducts")
  productViews      ProductView[]

  @@map("products")
}

model ProductVariant {
  id        String  @id @default(cuid())
  productId String
  size      String?
  color     String?
  stock     Int     @default(0)
  price     Decimal? @db.Decimal(10, 2)
  sku       String  @unique
  isActive  Boolean @default(true)

  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("product_variants")
}

model ProductRelation {
  id           String @id @default(cuid())
  productId    String
  relatedId    String

  product      Product @relation("ProductRelations", fields: [productId], references: [id], onDelete: Cascade)
  related      Product @relation("RelatedProducts", fields: [relatedId], references: [id], onDelete: Cascade)

  @@unique([productId, relatedId])
  @@map("product_relations")
}

model ProductView {
  id        String   @id @default(cuid())
  productId String
  userId    String?
  sessionId String?
  viewedAt  DateTime @default(now())

  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("product_views")
}

model Review {
  id        String   @id @default(cuid())
  userId    String
  productId String
  rating    Int      // 1-5
  title     String
  comment   String
  verified  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@map("reviews")
}

model Order {
  id              String   @id @default(cuid())
  orderNumber     String   @unique
  userId          String
  status          String   @default("pending") // pending, confirmed, processing, shipped, delivered, cancelled
  subtotal        Decimal  @db.Decimal(10, 2)
  shipping        Decimal  @db.Decimal(10, 2)
  tax             Decimal  @db.Decimal(10, 2)
  total           Decimal  @db.Decimal(10, 2)
  notes           String?
  trackingNumber  String?
  paymentMethod   String
  paymentData     Json?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  shippingAddress Address  @relation("ShippingAddress", fields: [shippingAddressId], references: [id])
  billingAddress  Address  @relation("BillingAddress", fields: [billingAddressId], references: [id])
  items           OrderItem[]
  shippingAddressId String
  billingAddressId  String

  @@map("orders")
}

model OrderItem {
  id        String  @id @default(cuid())
  orderId   String
  productId String
  name      String
  price     Decimal @db.Decimal(10, 2)
  quantity  Int
  size      String?
  color     String?
  image     String

  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product   Product @relation(fields: [productId], references: [id])

  @@map("order_items")
}

model Cart {
  id        String   @id @default(cuid())
  userId    String?  @unique
  sessionId String?  @unique
  subtotal  Decimal  @default(0) @db.Decimal(10, 2)
  tax       Decimal  @default(0) @db.Decimal(10, 2)
  shipping  Decimal  @default(0) @db.Decimal(10, 2)
  total     Decimal  @default(0) @db.Decimal(10, 2)
  coupon    String?
  discount  Decimal  @default(0) @db.Decimal(10, 2)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  items     CartItem[]

  @@map("carts")
}

model CartItem {
  id        String   @id @default(cuid())
  cartId    String
  productId String
  name      String
  price     Decimal  @db.Decimal(10, 2)
  quantity  Int
  size      String?
  color     String?
  image     String
  addedAt   DateTime @default(now())

  cart      Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id])

  @@map("cart_items")
}

model Wishlist {
  id        String   @id @default(cuid())
  userId    String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  items     WishlistItem[]

  @@map("wishlists")
}

model WishlistItem {
  id        String   @id @default(cuid())
  wishlistId String
  productId String
  name      String
  price     Decimal  @db.Decimal(10, 2)
  image     String
  category  String
  addedAt   DateTime @default(now())

  wishlist  Wishlist @relation(fields: [wishlistId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id])

  @@unique([wishlistId, productId])
  @@map("wishlist_items")
}

model NewsletterSubscriber {
  id              String    @id @default(cuid())
  email           String    @unique
  firstName       String?
  lastName        String?
  status          String    @default("active") // active, unsubscribed
  subscribedAt    DateTime  @default(now())
  unsubscribedAt  DateTime?
  lastEmailSent   DateTime?

  @@map("newsletter_subscribers")
}

model BlogPost {
  id          String   @id @default(cuid())
  title       String
  slug        String   @unique
  excerpt     String
  content     String
  featuredImage String?
  author      String
  tags        String[]
  category    String
  isPublished Boolean  @default(false)
  publishedAt DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("blog_posts")
}

model Lookbook {
  id          String   @id @default(cuid())
  title       String
  slug        String   @unique
  description String
  images      String[]
  season      String?
  year        Int?
  isPublished Boolean  @default(false)
  publishedAt DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("lookbooks")
}

model SearchQuery {
  id        String   @id @default(cuid())
  query     String
  userId    String?
  sessionId String?
  results   Int
  createdAt DateTime @default(now())

  @@map("search_queries")
}

model Admin {
  id          String   @id @default(cuid())
  email       String   @unique
  password    String
  firstName   String
  lastName    String
  role        String   @default("admin") // admin, super_admin, manager
  permissions String[] // Array of permission strings
  isActive    Boolean  @default(true)
  lastLogin   DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  sessions    AdminSession[]

  @@map("admins")
}

model AdminSession {
  id        String   @id @default(cuid())
  adminId   String
  token     String   @unique
  expiresAt DateTime
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())

  admin     Admin    @relation(fields: [adminId], references: [id], onDelete: Cascade)

  @@map("admin_sessions")
}

model Media {
  id          String   @id @default(cuid())
  filename    String
  originalName String
  mimeType    String
  size        Int
  url         String
  alt         String?
  caption     String?
  category    String?  // product, blog, gallery, etc.
  tags        String[]
  isActive    Boolean  @default(true)
  uploadedBy  String?  // admin ID
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("media")
}

model DiscountCode {
  id          String   @id @default(cuid())
  code        String   @unique
  name        String
  description String?
  type        String   // percentage, fixed_amount, free_shipping
  value       Float
  minOrderAmount Float?
  maxDiscountAmount Float?
  usageLimit  Int?
  usedCount   Int      @default(0)
  isActive    Boolean  @default(true)
  startsAt    DateTime
  expiresAt   DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("discount_codes")
}

model ContactMessage {
  id        String   @id @default(cuid())
  name      String
  email     String
  phone     String?
  subject   String
  message   String
  status    String   @default("unread") // unread, read, replied, archived
  priority  String   @default("normal") // low, normal, high, urgent
  isRead    Boolean  @default(false)
  repliedAt DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("contact_messages")
}

model Banner {
  id          String   @id @default(cuid())
  title       String
  subtitle    String?
  image       String
  link        String?
  linkText    String?
  type        String   // hero, product, announcement, promotion
  category    String?  // bags, shoes, new-arrivals, etc.
  priority    Int      @default(0) // Higher number = higher priority
  isActive    Boolean  @default(true)
  startDate   DateTime?
  endDate     DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("banners")
}